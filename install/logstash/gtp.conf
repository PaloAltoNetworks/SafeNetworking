input {
    # Input for PAN-OS device GTP logs
    tcp {
        host => "0.0.0.0"
        port => "5516"
        tags => [ "PAN-OS_gtp" ]
    }
    udp {
        host => "0.0.0.0"
        port => "5516"
        tags => [ "PAN-OS_gtp" ]
    }
}

filter {
    if "PAN-OS_gtp" in [tags] {
        # GTP log fields: https://www.paloaltonetworks.com/documentation/80/pan-os/pan-os/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/gtp-log-fields
        if ([message] =~ /SCTP/) {
            csv {
                source => "message"
                columns => [ 
                    "Domain", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "Config Version",
                    "GeneratedTime", "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName",
                    "SourceUser", "DestinationUser", "Application", "VirtualSystem", "SourceZone", "DestinationZone",
                    "InboundInterface", "OutboundInterface", "LogForwardingProfile", "TimeLogged", "SessionID",
                    "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort", "NATDestinationPort", "Flags",
                    "Protocol", "Action", "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                    "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "SequenceNumber", "Action_Flags",
                    "SCTP_Association_ID", "Payload_Protocol_ID", "Severity", "SCTP_Chunk_Type", "SCTP_Event_Type", "SCTP_Event_Code",
                    "SCTPVerificationTag1", "SCTPVerificationTag2", "SCTP_Cause_Code", "Diameter_App_ID", "Diameter_Command_Code",
                    "Diameter_AVP_Code", "SCTP_Stream_ID", "SCTP_Assocation_End_Reason", "op_code", "SCCPCallingPartySSN", 
                    "SCCPCallingPartyGlobalTitle", "SCTP_Filter_ID", "SCTP_Chunks", "SCTP_Chunks_Sent", "SCTP_Chunks_Received",
                    "Packets", "PacketsSent", "PacketsReceived"
                ]
            }
            mutate {
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
                add_tag => ["SFN-SCTP"]
                
            }
        } # End if message is SCTP
        
        else if ([message] =~ /GTP/) {
            csv {
                source => "message"
                columns => [ 
                    "Domain", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "Config Version",
                    "GeneratedTime", "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName", 
                    "SourceUser", "DestinationUser", "Application", "VirtualSystem", "SourceZone", "DestinationZone",
                    "InboundInterface", "OutboundInterface", "LogForwardingProfile", "TimeLogged", "SessionID",
                    "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort", "NATDestinationPort", "Flags",
                    "Protocol", "Action", "EventType", "MSISDN", "APN", "RAT", "MsgType", "EndIPAddr", "TEID1", "TEID2",
                    "GTPInterface", "CauseCode", "Severity", "MCC", "MNC", "AreaCode", "CellID", "EventCode",
                    "SequenceNumber", "ActionFlags", "SourceLocation", "DestinationLocation", "cpadding", 
                    "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                    "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "TunnelID_IMSI", "MonitorTag_IMEI",
                    "ParentSessionID", "ParentStartTime", "TunnelType", "Bytes", "BytesSent", "BytesReceived",
                    "Packets", "PacketsSent", "PacketsReceived", "MaxEncap", "UnknownProto", "StrictCheck", "TunnelFrag",
                    "SessionsCreated", "SessionsClosed", "SessionEndReason", "ActionSource", "StartTime", "ElapsedTime"
                ]
            }

            mutate {
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
                #convert => [ "EventCode", "integer" ]
                add_tag => ["SFN-GTP"]
                
            }

            # Populate some relevant information for the event code
            if ([EventCode] =~ "^144*$" and [EventCode] !~ "^1441*$" and [EventCode] !~ "^1442*$"){
                mutate {
                    add_field => {"[GTP][GTPVersion]" => "Invalid"}
                    add_field => {"[GTP][Descriptipn]" => "Invalid GTP Version"}
                    add_field => {"[GTP][InformationElement]" => ""}
                    add_field => {"[GTP][MessageType]" => ""}
                    add_field => {"[GTP][EventCode]" => "%{[EventCode]}"}
                }    
            }
            else {
                elasticsearch {
                    hosts => ["elasticsearch"]
                    index => ["test-gtp-codes"]
                    query => "EventCode:%{[EventCode]}"
                    fields => { "GTPVersion" => "[GTP][GTPVersion]" }
                    fields => { "Description" => "[GTP][Description]" }
                    fields => { "InformationElement" => "[GTP][InformationElement]" }
                    fields => { "MessageType" => "[GTP][MessageType]" }
                    fields => { "EventCode" => "[GTP][EventCode]"}
                }
            }

        }  # End if message GTP
            
        date {
            match => [ "GeneratedTime", "yyyy/MM/dd HH:mm:ss"]
        }
        
        # Original message has been fully parsed, so remove it.
        mutate {            
            remove_field => [ "message" ]
        }
        
        # Geolocate logs that have SourceIP if that SourceIP is a non-RFC1918 address
        if [SourceIP] and [SourceIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
               source => "SourceIP"
               target => "SourceIPGeo"
          }
            # Delete 0,0 in SourceIPGeo.location if equal to 0,0
            if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "SourceIPGeo.location", "" ]
                }
            }
        }
        # Geolocate logs that have DestinationIP and if that DestinationIP is a non-RFC1918 address
        if [DestinationIP] and [DestinationIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "DestinationIP"
                target => "DestinationIPGeo"
            }
      
            # Delete 0,0 in DestinationIPGeo.location if equal to 0,0
            if ([DestinationIPGeo.location] and [DestinationIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "DestinationIPGeo.location", "" ]
                }
            }
        }
        # Takes the 5-tuple of source address, source port, destination address, destination port, and protocol and does a SHA1 hash to fingerprint the flow.  This is a useful
        # way to be able to do top N terms queries on flows, not just on one field.
        if [SourceIP] and [DestinationIP] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "SourceIP", "SourcePort", "DestinationIP", "DestinationPort", "Protocol" ]
            }
        }
    }   # End of if PAN-OS_gtp in tags
}

output {
    if "SFN-GTP" in [tags] {
        elasticsearch {
            hosts    => [ 'elasticsearch' ]
            index => "gtp-%{+YYYY.MM}"
        }
        stdout { codec => rubydebug }
    }
    else if "SFN-SCTP" in [tags] {
        elasticsearch {
            hosts    => [ 'elasticsearch' ]
            index => "sctp-%{+YYYY.MM}"
        }
        stdout { codec => rubydebug }
    }
    else {
       file {
           path => "/var/log/logstash/failed_gtp_events-%[+YYYY.MM].log"
        }
    }
}
