input {
    # Input for Edge Routers alerting to known malicious IoT IPs
    udp {
        host => "0.0.0.0"
        port => "5510"
        tags => "IOT_External"
    }
}

filter {
    grok {
        match => { "message" => "<%{NONNEGINT:syslog_pri}>%{NONNEGINT} %{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:received_from} - - - - %{DATA:flex_card} %{DATA:log_prefix}: %{DATA:router_type}: %{DATA} %{GREEDYDATA:log_app} %{GREEDYDATA} -> %{GREEDYDATA} %{DATA:protocol} %{IP:SourceIP} %{IP:DestinationIP}  %{GREEDYDATA}" }
        add_field => [ "received_at", "%{@timestamp}" ]
        add_tag => [ "SFN-IOT" ]
    }

    date {
        match => [ "GeneratedTime", "yyyy/MM/dd HH:mm:ss"]
    }
    # Original message has been fully parsed, so remove it.
    # mutate {            
    #     remove_field => [ "message" ]
    # }
    
    # Look up the malware based on the traffic destination and classify in 
    # SFN subsection of document
    elasticsearch {
        hosts => ["elasticsearch"]
        index => ["sfn-iot-details"]
        enable_sort => "false"
        query => "ip:%{[DestinationIP]}"
        fields => { "filetype" => "[SFN][file_type]" }
        fields => { "tag_name" => "[SFN][tag_name]" }
        fields => { "public_tag_name" => "[SFN][public_tag_name]" }
        fields => { "tag_description" => "[SFN][tag_description]" }
        fields => { "tag_group_name" => "[SFN][tag_group_name]" }
        fields => { "tag_class" => "[SFN][tag_class]" }

        
    }

    # Lookup customer associated with Source IP at time of event
    # elasticsearch {
    #     hosts => ["elasticsearch"]
    #     index => ["customer-db"]
    #     query => "ip_addr:%{[SourceIP]}"
    #     fields => { "name" => "[CUSTOMER][name]" }
    #     fields => { "address" => "[CUSTOMER][address]" }
    #     fields => { "city" => "[CUSTOMER][city]" }
    #     fields => { "country" => "[CUSTOMER][country]" }
    #     fields => { "zip" => "[CUSTOMER][zip]" }
    #     fields => { "phone" => "[CUSTOMER][phone]" }
    #     fields => { "email" => "[CUSTOMER][email]" }
    #     fields => { "acct_number" => "[CUSTOMER][acct_number]" }
    #     fields => { "imsi" => "[CUSTOMER][imsi]" }
    #     fields => { "imei" => "[CUSTOMER][imei]" }
    #     fields => { "ip_addr" => "[CUSTOMER][ip_addr]" }
    # }

}   # End of filter section

output {
    if "SFN-IOT" in [tags] {
        elasticsearch {
            hosts    => [ 'elasticsearch' ]
            user     => 'elastic'
            password => 'changeme'
            index => "iot-%{+YYYY.MM}"
        }
        #stdout { codec => rubydebug }
    }
    else {
        file {
           path => "/var/log/logstash/failed_iot_events-%{+YYYY.MM}.log"
        }
        #stdout { codec => rubydebug }
    }
}
